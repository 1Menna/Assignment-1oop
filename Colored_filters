 #include <bits/stdc++.h>
#include "bmplib.cpp"
#define nl '\n'
using namespace std;

unsigned char image[SIZE][SIZE][RGB],image2[SIZE][SIZE][RGB],bitImage[SIZE][SIZE];

void loadImage(){
    char imageFileName[100];

    // Get gray scale image file name
    cout << "Enter the source image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    readRGBBMP(imageFileName, image);
}

void loadImage2(){
    char imageFileName[100];

    // Get gray scale image file name
    cout << "Enter the source image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    readRGBBMP(imageFileName, image2);
}

void saveImage (){
    char imageFileName[100];

    // Get gray scale image target file name
    cout << "Enter the target image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    writeRGBBMP(imageFileName, image);
}
void printFilters(){
    cout<<"Please select the filter to apply or 0 to Exit:\n";
    cout << "1-Black & White Filter \n";
    cout<< "2-Invert Filter \n";
    cout<<"3-Merge Filter \n";
    cout<<"4-Flip Image \n";
    cout<<"5-Rotate Image \n";
    cout<<"6-Darken and lighten Image\n";
    cout<<"7-Detect Edges Filter\n8-Enlarge Image \n";
    cout<<"9-Shrink image\n";
    cout<<"10-Mirror Filter\n";
    cout<<"11-Shuffle Filter\n";
    cout<<"12-Shrink_image\n";
    cout<<"13-Blur_image\n";
    cout<<"0-Exit \n";
    cout<<"Choose number: ";
}
void saveBitImage (){
    char imageFileName[100];

    // Get gray scale image target file name
    cout << "Enter the target image file name: ";
    cin >> imageFileName;

    // Add to it .bmp extension and load image
    strcat (imageFileName, ".bmp");
    writeGSBMP(imageFileName, bitImage);
}

void BWfilter(){
    for (int i = 0; i<SIZE; i++)
        for (int j = 0; j<SIZE; j++){
            int av = 0;
            for (int k = 0; k<RGB; k++)
                av += image[i][j][k];
            for (int k = 0; k<RGB; k++)
                image[i][j][k] = (av/3 > 127? 255:0);
        }
}

void invertImage(){
    for (int i = 0; i<SIZE; i++)
        for (int j = 0; j<SIZE; j++)
            for (int k = 0; k<RGB; k++)
                image[i][j][k] = 255-image[i][j][k];
}

void grayImage(){
    for (int i = 0; i<SIZE; i++)
        for (int j = 0; j<SIZE; j++){
            int av = 0;
            for (int k = 0; k<RGB; k++)
                av += image[i][j][k];
            av /= 3;
            for (int k = 0; k<RGB; k++)
                image[i][j][k] = av;
        }
}

void flipImage(){
    cout<<"Enter H for horizontal flip, or V for vertical flip: ";
    char c;
    cin>>c;
    if (tolower(c) == 'h')
        for (int i = 0; i<SIZE/2; i++)
            for (int j = 0; j<SIZE; j++)
                // for (int k = 0; k < RGB; k++)
                swap(image[i][j],image[SIZE-i][j]);
    else
        for (int i = 0; i<SIZE; i++)
            for (int j = 0; j<SIZE/2; j++)
                // for (int k = 0; k < RGB; k++)
                swap(image[i][j],image[i][SIZE-j]);
}

void detectEdgeFilter(){
    for (int i = 0; i<SIZE; i++)
        for (int j = 0; j<SIZE; j++)
            for(int k=0;k<RGB;k++){
                if (abs(image[i][j][k] - image[i][j+1][k]) > 30 ||
                    abs(image[i][j][k] - image[i+1][j][k]) > 30
                    || (i && abs(image[i][j][k] - image[i-1][j][k]) > 30) ||
                    (j && abs(image[i][j][k] - image[i][j-1][k]) > 30))
                    image2[i][j][k] = 0;
                else
                    image2[i][j][k] = 255;}
    for (int i = 0; i<SIZE; i++)
        for (int j = 0; j<SIZE; j++)
            for(int k=0;k<RGB;k++)
                image[i][j][k] = image2[i][j][k];
}
void mirrorImage(){
    cout<<"Enter 'L' to mirror the left half,"<<nl;
    cout<<"or 'R' for the right half,"<<nl;
    cout<<"or 'U' for the upper half,"<<nl;
    cout<<"or 'D' for the down half."<<nl;
    char c;
    cin>>c;
    if (tolower(c) == 'u')
        for (int i = 0; i<SIZE/2; i++)
            for (int j = 0; j<SIZE; j++)
                for (int k = 0; k<RGB; k++)
                    image[SIZE - i][j][k] = image[i][j][k];
    else if (tolower(c) == 'd')
        for (int i = 0; i<SIZE/2; i++)
            for (int j = 0; j<SIZE; j++)
                for (int k = 0; k<RGB; k++)
                    image[i][j][k] = image[SIZE - i][j][k];
    else if (tolower(c) == 'l')
        for (int i = 0; i<SIZE; i++)
            for (int j = 0; j<SIZE/2; j++)
                for (int k = 0; k<RGB; k++)
                    image[i][SIZE - j][k] = image[i][j][k];
    else
        for (int i = 0; i<SIZE; i++)
            for (int j = 0; j<SIZE/2; j++)
                for (int k = 0; k<RGB; k++)
                    image[i][j][k] = image[i][SIZE - j][k];
}


void mergeImages(){
    for (int i = 0; i<SIZE; i++)
        for (int j = 0; j<SIZE; j++)
            for (int k = 0; k<RGB; k++)
                image[i][j][k] = (image[i][j][k] + image2[i][j][k]) / 2;
}

void cropImage(){
    int x,y,l,w;
    cout<<"Enter the coordinates of the beginning point: ";
    while (cin>>x>>y, x > 255 || y > 255)
        cout<<"Out Of Range, please enter a valid point! ";
    cout<<"Enter the dimensions of the needed image: ";
    while(cin>>l>>w, x+l > 255 || y+w > 255)
        cout<<"Out Of Range, please enter a valid point! ";
    for (int i = 0; i<SIZE; i++)
        for (int j = 0; j<SIZE; j++)
            if (i < x || i > x+l || j < y || j > y+w)
                for (int k = 0; k < RGB; k++)
                    image[i][j][k] = 255;
}
void light_And_darker()
{
    cout <<"What do u want light(l)or darker(d)? ";
    char c ;
    cin >> c ;
    if(tolower(c)=='l'){
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j< SIZE; j++) {
                for(int k=0;k<RGB;k++)

                    image[i][j][k] = (255 + image[i][j][k]) / 2;
            }
        }
    }
    else if(tolower(c)=='d')
    {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j< SIZE; j++) {
                for(int k=0;k<RGB;k++)

                    image[i][j][k] =  image[i][j][k] / 2;
            }
        }
    }
    else
    {
        cout<<"Invalid input Plz try again ^_^"<<nl;
        light_And_darker();
    }
}
void RotateImage(){
    int p=0;
    cout<<"choose the angle of rotate by clockwise\n";
    cout<<"1-90 degree\n2-180 degree\n3-270 degree\n";
    cin>>p;
    unsigned char copy[SIZE][SIZE][RGB];
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            for(int k=0;k<RGB;k++){
                copy[i][j][k]=image[i][j][k];}}}
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            for(int k=0;k<RGB;k++){
                if(p==1)
                    image[i][j][k]=copy[255-j][i][k];
                else if(p==2)
                    image[i][j][k]=copy[255-i][255-j][k];
                else if(p==3)
                    image[i][j][k]=copy[j][255-i][k];}}
    }}

void shuffle(){
    unsigned char copy[SIZE][SIZE][RGB];
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            for(int k=0; k<RGB;k++)
                copy[i][j][k]=image[i][j][k];}}
    int q1,q2,q3,q4;
    cout<<"enter the order of quarters that you want\n";
    cin>>q1>>q2>>q3>>q4;
    //quarter1
    for (int i = 0; i < 127; i++) {
        for (int j = 0; j < 127; j++) {
            for(int k=0; k<RGB;k++){
                if(q1==1)
                    image[i][j][k]=copy[i][j][k];
                else if(q1==2)
                    image[i][j][k]=copy[i][j+127][k];
                else if(q1==3)
                    image[i][j][k]=copy[i+127][j][k];
                else if(q1==4)
                    image[i][j][k]=copy[i+127][j+127][k];
            }
        }}
//quarter2
for (int i = 0; i < 127; i++) {
     for (int j = 127; j < SIZE; j++) {
         for(int k=0; k<RGB;k++){
            if(q2==1)
               image[i][j][k]=copy[i][j-127][k];
             else if(q2==2)
                 image[i][j][k]=copy[i][j][k];
             else if(q2==3)
                image[i][j][k]=copy[i+127][j-127][k];
             else if(q2==4)
                 image[i][j][k]=copy[i+127][j][k];
          }
             }}
//quarter3
  for (int i = 127; i < SIZE; i++) {
      for (int j = 0; j < 127; j++) {
          for(int k=0; k<RGB;k++){

       if(q3==1)
          image[i][j][k]=copy[i-127][j][k];
       else if(q3==2)
          image[i][j][k]=copy[i-127][j+127][k];
        else if(q3==3)
           image[i][j][k]=copy[i][j][k];
       else if(q3==4)
           image[i][j][k]=copy[i][j+127][k];
}}}
//quarter4
for (int i = 127; i < SIZE; i++) {
     for (int j = 127; j < SIZE; j++) {
         for(int k=0; k<RGB;k++){
        if(q4==1)
          image[i][j][k]=copy[i-127][j-127][k];
        else if(q4==2)
                    image[i][j][k]=copy[i-127][j][k];
        else if(q4==3)
                 image[i][j][k]=copy[i][j-127][k];
        else if(q4==4)
            image[i][j][k]=copy[i][j][k];
}}
}}

void shrink_image()
{
    int size;
    cout<<"plz enter the size of photo^_^\n";
    cin>> size;
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            for(int k=0;k<RGB;k++){
                if(i <SIZE/size&& j<SIZE/size)
                    image[i][j][k]=image[i*size][j*size][k];
                else
                    image[i][j][k]=255;
            }}}}
void Blure_image() {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            for(int k=0;k<RGB;k++){
                image[i][j][k]=(image[i][j][k]+image[i+1][j+1][k]+image[i-1][j-1][k]+image[i+1][j][k]+
                                image[i][j+1][k]
                                +image[i+2][j+2][k]+image[i-1][j][k]+image[i][j-1][k]+image[i+2][j][k]+
                                image[i][j+2][k]+image[i-2][j][k]+image[i][j-2][k]+
                                image[i-2][j+1][k]+image[i+2][j-1][k]+image[i+1][j+2][k]+
                                image[i-1][j+2][k]+
                                image[i+1][j-2][k])/17;

                //blur effect is achieved by manipulating the existing pixels in the image. When you apply a blur filter,
                // the software averages the color and intensity of neighboring pixels to create a smoother appearance.
            }
        }
    }}
void enlarge_filter(){
    unsigned char copy[SIZE][SIZE][RGB];
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            for(int z=0;z<RGB;z++){
                copy[i][j][z]=image[i][j][z];}}}
    //quarter1
    cout<<"choose the quarter that you want to enlarge\n ";
    int quarter;
    cin>>quarter;
    if(quarter==1){
        for (int i=0,k=0;i<=127;i++,k+=2) {
            for (int j=0,m=0;j<127;j++,m+=2) {
                for(int z=0;z<RGB;z++){
                    image[k][m][z]=copy[i][j][z];
                    image[k][m+1][z]=copy[i][j][z];
                    image[k+1][m][z]=copy[i][j][z];
                    image[k+1][m+1][z]=copy[i][j][z];
                }
            }}}
    else if(quarter==2){
        for (int i=0,k=0;i<=127;i++,k+=2) {
            for (int j=127,m=0;j<SIZE;j++,m+=2) {
                for(int z=0;z<RGB;z++){
                    image[k][m][z]=copy[i][j][z];
                    image[k][m+1][z]=copy[i][j][z];
                    image[k+1][m][z]=copy[i][j][z];
                    image[k+1][m+1][z]=copy[i][j][z];
                }
            }
        }}
    else if(quarter==3){
        for (int i=127,k=0;i<=SIZE;i++,k+=2) {
            for (int j=0,m=0;j<127;j++,m+=2) {
                for(int z=0;z<RGB;z++){
                    image[k][m][z]=copy[i][j][z];
                    image[k][m+1][z]=copy[i][j][z];
                    image[k+1][m][z]=copy[i][j][z];
                    image[k+1][m+1][z]=copy[i][j][z];
                }
            }}
    }
    else if(quarter==4){
        for (int i=127,k=0;i<=SIZE;i++,k+=2) {
            for (int j=127,m=0;j<SIZE;j++,m+=2) {
                for(int z=0;z<RGB;z++){
                    image[k][m][z]=copy[i][j][z];
                    image[k][m+1][z]=copy[i][j][z];
                    image[k+1][m][z]=copy[i][j][z];
                    image[k+1][m+1][z]=copy[i][j][z];
                }
            }
        }
    }}
void skew() {
    cout << "1-skew vertically\n2-skew horizontally\n";
    int num;
    cin >> num;
    if (num == 1) {
        cout << "enter the degree\n";
        double degree;
        cin >> degree;
        double toleave = tan(degree * 3.14 / 180) * SIZE;
        double step = (double) toleave / SIZE, curr = 0, taken = 0;
        double compress = (double) SIZE / (SIZE - toleave);
        for (int i = 0; i < SIZE; i++) {//old photo
            curr = 0;// column;
            for (int j = toleave - taken; j < SIZE - taken; j++) {//new photo
                for (int z = 0; z < RGB; z++) {
                    int sum = 0;//avg
                    int old_current = max(0, int(curr - compress));//0,0,2,4
                    int new_current = min(SIZE, int(curr + compress));//2,4,6,8
                    for (int k = max(0, old_current);
                         k < min(new_current, SIZE); k++) {
                        sum += image[i][k][z];
                    }
                    int pixels = new_current - old_current;//num of pixel
                    image2[i][j][z] = sum / max(1, pixels);}//
                curr += compress;//2//4//6//8
            }

            taken += step;
        }
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                for(int k=0;k<RGB;k++){
                image[i][j][k] = image2[i][j][k];}
            }
        }
    } else {
        cout << "enter the degree\n";
        double degree;
        cin >> degree;
        double toleave = tan(degree * 3.14 / 180) * SIZE;
        double step = (double) toleave / SIZE, curr = 0, taken = 0;
        double compress = (double) SIZE / (SIZE - toleave);
        for (int j = 0; j < SIZE; j++) {//old photo
            curr = 0;// column;
            for (int i = toleave - taken; i < SIZE - taken; i++) {//new photo
                for (int z = 0; z < RGB; z++) {
                    int sum = 0;//avg
                    int old_current = max(0, int(curr - compress));//0,0,2,4
                    int new_current = min(SIZE, int(curr + compress));//2,4,6,8
                    for (int k = max(0, old_current);
                         k < min(new_current, SIZE); k++) {
                        sum += image[k][j][z];
                    }
                    int pixels = new_current - old_current;//num of pixel
                    image2[i][j][z] = sum / max(1, pixels);}//
                curr += compress;//2//4//6//8
            }

            taken += step;
        }
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                for(int k=0;k<RGB;k++)
                    image[i][j][k]=image2[i][j][k];
            }
        }
    }


}

 int main()
{
    cout << "Ahlan ya user ya habiby^_^ :)  \n\n";
    loadImage();
    printFilters();
    int filterNum;
    while(cin>>filterNum, filterNum){
        bool done = true;
        switch(filterNum) {
            case 1://done
                BWfilter();
                break;
            case 2://done
                invertImage();
                break;
            case 3://done
                loadImage2();
                mergeImages();
                break;
            case 4:// done
                flipImage();
                break;
            case 5://done
                RotateImage();
                break;
            case 6:// done
                light_And_darker();
                break;
            case 7://done
                detectEdgeFilter();
                break;
            case 8://done
                enlarge_filter();
                break;
            case 9://done
                cropImage();
                break;
            case 10 ://done
                mirrorImage();
                break;
            case 11://no
                shuffle();
                break;
            case 12://done
                shrink_image();
                break;
            case 13 ://done
                Blure_image();
                break;
            case 14://done
                skew();
                break;
            default:
                cout << "INVALID...";
                done = false;
                break;
        }
        cout << endl;
        cout <<(done? "THE FILTER APPLIED SUCCESSFULLY...\n":"Try again!\n");
        cout<<"Will you try another filter?\n\n";
        printFilters();
    }
    saveImage();
}
